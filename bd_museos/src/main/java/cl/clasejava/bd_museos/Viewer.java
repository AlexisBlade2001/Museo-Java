/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cl.clasejava.bd_museos;

import javax.swing.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;

import cl.clasejava.bd_museos.add.addArtwork;
import cl.clasejava.bd_museos.add.addAuthor;
import cl.clasejava.bd_museos.add.addCountry;
import cl.clasejava.bd_museos.add.addMuseum;
import java.util.*;

/**
 *
 * @author alexblade2001
 */
public class Viewer extends javax.swing.JFrame {

    private DatabaseConnection DBConnection;

    public Viewer() {
        initComponents();
        DBConnection = DatabaseConnection.getInstance();
        createTablesFromSQL();
    }

    private void createTablesFromSQL() {
        try (Connection connection = DBConnection.getConnection()) {
            List<String> tableNames = getTableNames(connection);
            for (String tableName : tableNames) {
                createTable(connection, tableName);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private List<String> getTableNames(Connection connection) throws SQLException {
        List<String> tableNames = new ArrayList<>();
        DatabaseMetaData metaData = connection.getMetaData();
        ResultSet resultSet = metaData.getTables(null, null, null, new String[]{"TABLE"});

        while (resultSet.next()) {
            tableNames.add(resultSet.getString("TABLE_NAME"));
        }

        resultSet.close();
        return tableNames;
    }

    private void createTable(Connection connection, String tableName) {
        try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery("SELECT * FROM " + tableName)) {

            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();
            String[] columnNames = new String[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                columnNames[i - 1] = metaData.getColumnName(i);
            }

            DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
            while (resultSet.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    rowData[i - 1] = resultSet.getObject(i);
                }
                tableModel.addRow(rowData);
            }

            JTable table = new JTable(tableModel);
            tabs.addTab(tableName, new JScrollPane(table));
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        add = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        close = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Base de Datos: Museo");

        add.setText("Agregar");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        delete.setText("Eliminar");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        close.setText("Cerrar");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(delete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(close)
                .addContainerGap())
            .addComponent(tabs, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add)
                    .addComponent(delete)
                    .addComponent(close)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        createTablesFromSQL();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addActionPerformed
        switch (getCurrentTabTitle(tabs)) {
            case "museo":
                addMuseum museum = new addMuseum();
                museum.setVisible(true);
                break;
            case "autor":
                addAuthor author = new addAuthor();
                author.setVisible(true);
                break;
            case "pais_origen":
                addCountry country = new addCountry();
                country.setVisible(true);
                break;
            case "obra":
                addArtwork artwork = new addArtwork();
                artwork.setVisible(true);
                break;

            default:
                break;
        }
    }// GEN-LAST:event_addActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteActionPerformed
        String selectedTabTitle = getCurrentTabTitle(tabs);
        if (selectedTabTitle != null) {
            JTable selectedTable = tabs.getSelectedComponent() instanceof JScrollPane
                    ? (JTable) ((JScrollPane) tabs.getSelectedComponent()).getViewport().getView()
                    : (JTable) tabs.getSelectedComponent();

            int selectedRow = selectedTable.getSelectedRow();

            if (selectedRow != -1) {
                int confirm = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar el registro seleccionado?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    try {
                        Connection connection = DBConnection.getConnection();
                        Statement statement = connection.createStatement();
                        String deleteQuery = "";
                        switch (getCurrentTabTitle(tabs)) {
                            case "museo":
                                String queryOne = "DELETE FROM " + selectedTabTitle + " WHERE idMuseo = " + selectedTable.getValueAt(selectedRow, 0);
                                deleteQuery = queryOne;
                                break;
                            case "autor":
                                String queryTwo = "DELETE FROM " + selectedTabTitle + " WHERE idAutor = " + selectedTable.getValueAt(selectedRow, 0);
                                deleteQuery = queryTwo;
                                break;
                            case "pais_origen":
                                String queryThree = "DELETE FROM " + selectedTabTitle + " WHERE idPais = " + selectedTable.getValueAt(selectedRow, 0);
                                deleteQuery = queryThree;
                                break;
                            case "obra":
                                String queryFour = "DELETE FROM " + selectedTabTitle + " WHERE idObra = " + selectedTable.getValueAt(selectedRow, 0);
                                deleteQuery = queryFour;
                                break;

                            default:
                                break;
                        }
                        statement.executeUpdate(deleteQuery);
                        JOptionPane.showMessageDialog(this, "El registro se ha eliminado exitosamente.");
                        statement.close();
                        DefaultTableModel tableModel = (DefaultTableModel) selectedTable.getModel();
                        tableModel.removeRow(selectedRow);
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, "Error al eliminar el registro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se ha seleccionado ningún registro para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }// GEN-LAST:event_deleteActionPerformed

    private void cleanActionPerformed(java.awt.event.ActionEvent evt) {
        String selectedTabTitle = getCurrentTabTitle(tabs);

        if (selectedTabTitle != null) {
            JTable selectedTable = tabs.getSelectedComponent() instanceof JScrollPane
                    ? (JTable) ((JScrollPane) tabs.getSelectedComponent()).getViewport().getView()
                    : (JTable) tabs.getSelectedComponent();

            int selectedRow = selectedTable.getSelectedRow();

            if (selectedRow != -1) {
                int confirm = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas limpiar la tabla " + selectedTabTitle + "?", "Confirmar limpieza", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    try {
                        Connection connection = DBConnection.getConnection();
                        Statement statement = connection.createStatement();
                        String deleteQuery = "DELETE FROM " + selectedTabTitle;
                        statement.executeUpdate(deleteQuery);
                        JOptionPane.showMessageDialog(this, "La tabla " + selectedTabTitle + " se ha limpiado exitosamente.");
                        statement.close();
                        DefaultTableModel tableModel = (DefaultTableModel) selectedTable.getModel();
                        tableModel.removeRow(selectedRow);
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, "Error al limpiar la tabla " + selectedTabTitle + ": " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se ha seleccionado ningún registro para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }// GEN-LAST:event_cleanActionPerformed

    public String getCurrentTabTitle(JTabbedPane tabs) {
        int selectedIndex = tabs.getSelectedIndex();
        if (selectedIndex != -1) {
            String selectedTabTitle = tabs.getTitleAt(selectedIndex);
            return selectedTabTitle;
        } else {
            System.out.println("No hay ninguna pestaña seleccionada");
            return null;
        }
    }

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeActionPerformed
        try {
            DBConnection.getConnection().close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton close;
    private javax.swing.JButton delete;
    private javax.swing.JButton jButton1;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
}
